# coding: utf-8

def nth_triangle_number(n)
  (n * (n + 1)) / 2
end

def nth_pentagonal_number(n)
  (((3 * n) - 1) * n) / 2
end


def nth_hexagonal_number(n)
  n * ((2 * n) - 1)
end

fail unless nth_triangle_number(285) == 40755
fail unless nth_pentagonal_number(165) == 40755
fail unless nth_hexagonal_number(143) == 40755

t = 286
p = 165
h = 143

nt = nth_triangle_number(t)
np = nth_pentagonal_number(p)
nh = nth_hexagonal_number(h)

until (nt == np) && (np == nh)
  if nt <= np && nt <= nh
    t = t + 1
    nt = nth_triangle_number(t)
  elsif np <= nt && np <= nh
    p = p + 1
    np = nth_pentagonal_number(p)
  elsif nh <= nt && nh <= np
    h = h + 1
    nh = nth_hexagonal_number(h)
  else
    fail 'Invariant violated. GUID: 42094209uupoataoesrtn'
  end
end

puts "#{nt} = nth_triangle_number(#{t}) = nth_pentagonal_number(#{p}) = nth_hexagonal_number(#{h})"

=begin
C:\Users\me\folder\Project-Euler-Solutions>ruby 045.rb
1533776805 = nth_triangle_number(55385) = nth_pentagonal_number(31977) = nth_hexagonal_number(27693)

C:\Users\me\folder\Project-Euler-Solutions>ruby -v
ruby 2.5.0p0 (2017-12-25 revision 61468) [x64-mingw32]

C:\Users\me\folder\Project-Euler-Solutions>
=end

=begin
# Problem description (from projecteuler.net (https://projecteuler.net/problem=45); please visit the site and donate to it if you find it useful)
Triangular, pentagonal, and hexagonal
Problem 45

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle

Tn=n(n+1)/2

1, 3, 6, 10, 15, ...
Pentagonal

Pn=n(3n−1)/2

1, 5, 12, 22, 35, ...
Hexagonal

Hn=n(2n−1)

1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.
Find the next triangle number that is also pentagonal and hexagonal.
=end
