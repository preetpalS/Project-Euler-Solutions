# coding: utf-8

PENTAGONAL_NUMBERS = []

def compute_and_cache_next_pentagonal_number
  n = PENTAGONAL_NUMBERS.length + 1
  PENTAGONAL_NUMBERS.push ((((3 * n) - 1) * n) / 2)
end

def nth_pentagonal_number(n)
  while n > PENTAGONAL_NUMBERS.length
    compute_and_cache_next_pentagonal_number
  end
  PENTAGONAL_NUMBERS[n - 1]
end

def pentagonal?(x)
  while PENTAGONAL_NUMBERS.empty? || x > PENTAGONAL_NUMBERS[-1]
    compute_and_cache_next_pentagonal_number
  end
  PENTAGONAL_NUMBERS.include?(x)
end

2.times do
  compute_and_cache_next_pentagonal_number
end

fail unless PENTAGONAL_NUMBERS[0] == 1 && PENTAGONAL_NUMBERS[1] == 5

def solve
  (2..Float::INFINITY).each do |k|
    pk = nth_pentagonal_number(k)
    (1...k).each do |j|
      pj = nth_pentagonal_number(j)
      if pentagonal?(pk - pj) && pentagonal?(pk + pj)
        return pk - pj
      end
    end
  end
end

puts solve

=begin
C:\Users\me\folder\Project-Euler-Solutions>ruby 044.rb
5482660

C:\Users\me\folder\Project-Euler-Solutions>ruby -v
ruby 2.5.0p0 (2017-12-25 revision 61468) [x64-mingw32]

C:\Users\me\folder\Project-Euler-Solutions>
=end

=begin
# Problem description (from projecteuler.net (https://projecteuler.net/problem=44); please visit the site and donate to it if you find it useful)
Pentagon numbers
Problem 44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
=end
